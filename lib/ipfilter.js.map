{"version":3,"sources":["../src/ipfilter.js"],"names":["_","require","iputil","rangeCheck","IpDeniedError","module","exports","ipfilter","ips","opts","getIps","isFunction","logger","message","console","log","settings","defaults","mode","logF","allowedHeaders","allowPrivateIPs","excluding","detectIp","getClientIp","req","ipAddress","headerIp","reduce","acc","header","testIp","headers","splitHeaderIp","split","connection","remoteAddress","isV6Format","indexOf","isV4Format","matchClientIp","ip","toLowerCase","result","invokeMap","some","every","constraint","validRange","testCidrBlock","testExplicitIp","testRange","inRange","filteredSet","filter","length","startIp","toLong","endIp","longIp","error","next","err","res","results","exclude","regex","RegExp","test","url","logLevel","_ips"],"mappings":"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","sourcesContent":["/*!\n * Express - IP Filter\n * Copyright(c) 2014 Bradley and Montgomery Inc.\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar _ = require('lodash');\nvar iputil = require('ip');\nvar rangeCheck = require('range_check');\nvar IpDeniedError = require('./deniedError');\n\n/**\n * express-ipfilter:\n *\n * IP Filtering middleware;\n *\n * Examples:\n *\n *      var ipfilter = require('ipfilter'),\n *          ips = ['127.0.0.1'];\n *          getIps = function() { return ['127.0.0.1']; };\n *\n *      app.use(ipfilter(ips));\n *      app.use(ipfilter(getIps));\n *\n * Options:\n *\n *  - `mode` whether to deny or grant access to the IPs provided. Defaults to 'deny'.\n *  - `logF` Function to use for logging.\n *  - `log` console log actions. Defaults to true.\n *  - `allowPrivateIPs` whether to allow private IPs.\n *  - `allowedHeaders` Array of headers to check for forwarded IPs.\n *  - 'excluding' routes that should be excluded from ip filtering\n *\n * @param [ips] {Array} IP addresses or {Function} that returns the array of IP addresses\n * @param [opts] {Object} options\n * @api public\n */\nmodule.exports = function ipfilter(ips, opts) {\n  ips = ips || false;\n\n  var getIps = _.isFunction(ips) ? ips : function(){ return ips; };\n  var logger = function(message){ console.log(message);};\n  var settings = _.defaults( opts || {}, {\n    mode: 'deny',\n    log: true,\n    logF: logger,\n    allowedHeaders: [],\n    allowPrivateIPs: false,\n    excluding: [],\n    detectIp: getClientIp\n  });\n\n  function getClientIp(req) {\n    var ipAddress;\n\n    var headerIp = _.reduce(settings.allowedHeaders, function(acc, header){\n      var testIp = req.headers[header];\n      if(testIp != ''){\n        acc = testIp;\n      }\n\n      return acc;\n    },'');\n\n    if(headerIp) {\n      var splitHeaderIp = headerIp.split(',');\n      ipAddress = splitHeaderIp[0];\n    }\n\n    if(!ipAddress) {\n      ipAddress = req.connection.remoteAddress;\n    }\n\n    if(!ipAddress){\n      return '';\n    }\n\n    if(iputil.isV6Format(ipAddress) && ~ipAddress.indexOf('::ffff')){\n      ipAddress = ipAddress.split('::ffff:')[1];\n    }\n\n    if(iputil.isV4Format(ipAddress) && ~ipAddress.indexOf(':')){\n      ipAddress = ipAddress.split(':')[0];\n    }\n\n    return ipAddress;\n  }\n\n  var matchClientIp = function(ip){\n    var mode = settings.mode.toLowerCase();\n\n    var result = _.invokeMap(getIps(),testIp,ip,mode);\n\n    if(mode === 'allow'){\n      return _.some(result);\n    }else{\n      return _.every(result);\n    }\n  };\n\n  var testIp = function(ip,mode){\n    var constraint = this;\n\n    // Check if it is an array or a string\n    if(typeof constraint === 'string'){\n      if(rangeCheck.validRange(constraint)){\n        return testCidrBlock(ip,constraint,mode);\n      }else{\n        return testExplicitIp(ip,constraint,mode);\n      }\n    }\n\n    if(typeof constraint === 'object'){\n      return testRange(ip,constraint,mode);\n    }\n  };\n\n  var testExplicitIp = function(ip,constraint,mode){\n    if(ip === constraint){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  var testCidrBlock = function(ip,constraint,mode){\n    if(rangeCheck.inRange(ip, constraint)){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  var testRange = function(ip,constraint,mode){\n    var filteredSet = _.filter(getIps(),function(constraint){\n      if(constraint.length > 1){\n        var startIp = iputil.toLong(constraint[0]);\n        var endIp = iputil.toLong(constraint[1]);\n        var longIp = iputil.toLong(ip);\n        return  longIp >= startIp && longIp <= endIp;\n      }else{\n        return ip === constraint[0];\n      }\n    });\n\n    if(filteredSet.length > 0){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  var error = function(ip, next){\n    var err = new IpDeniedError('Access denied to IP address: ' + ip);\n    return next(err);\n  };\n\n  return function(req, res, next) {\n    if(settings.excluding.length > 0){\n      var results = _.filter(settings.excluding,function(exclude){\n        var regex = new RegExp(exclude);\n        return regex.test(req.url);\n      });\n\n      if(results.length > 0){\n        if(settings.log && settings.logLevel !== 'deny'){\n          settings.logF('Access granted for excluded path: ' + results[0]);\n        }\n        return next();\n      }\n    }\n\n    var _ips = getIps();\n    if(!_ips || !_ips.length) {\n      if(settings.mode == 'allow'){\n        // ip list is empty, thus no one allowed\n        return error('0.0.0.0/0', next);\n      } else {\n        // there are no blocked ips, skip\n        return next();\n      }\n    }\n\n    var ip = settings.detectIp(req);\n\n    if(matchClientIp(ip,req)) {\n      // Grant access\n      if(settings.log && settings.logLevel !== 'deny') {\n        settings.logF('Access granted to IP address: ' + ip);\n      }\n\n      return next();\n    }\n\n    // Deny access\n    if(settings.log && settings.logLevel !== 'allow') {\n      settings.logF('Access denied to IP address: ' + ip);\n    }\n\n    return error(ip, next);\n  };\n};\n"],"file":"ipfilter.js"}